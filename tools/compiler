#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2017 Prophet Tech (Shanghai) Ltd.
#
# Authors: Li Xipeng <lixipeng@prophetech.cn>
"""Parse python code to so file.

Dependencies
-------------

Before use this script, we need to
install follow dependencies:

  ``python-devel``, ``gcc``, ``cython``

Usage
-------------

To compile files in specified directory:

    ./compiler <dir>


Result
-------------

After command excuted, a dir named ``build``
whould be created and all .so files in it.
"""
import marshal
import os
import re
import shutil
import sys
import time

from Cython.Build import cythonize
from distutils.core import setup


# To skip some files, change DEFAULT_SKIP
# and DEFAULT_SKIP is regular expression.
DEFAULT_SKIP = [r"sqlalchemy.alembic",
                r"api.app",
                r"api.config",
                r"prophet.tests",
                r"prophet.openstack",
                r"db.migration",
                r"conf.paths",
                r"api.app",
                r"utils",
                r"db.sqlalchemy.migrate_repo.manage"]
PROJECT_NAME = 'prophet'
# To change .so files generated dir, change
# build_dir path.
BASE_PATH = os.path.abspath(sys.path[0])
build_dir = os.path.abspath(os.path.join(BASE_PATH, '../build'))
base_dir = os.path.abspath(os.path.join(BASE_PATH, '../'))
build_tmp_dir = os.path.abspath(os.path.join(build_dir, 'tmp'))
compile_tmp = os.path.abspath(os.path.join(build_dir, "compile_tmp"))
PROJECT_PREFIX = os.path.abspath(os.path.join(base_dir, PROJECT_NAME))


def _skip(ffile):
    for skip in DEFAULT_SKIP:
        if re.search(skip, ffile):
            return True
    else:
        return False


def _compile_file_to_pyc(file_name):
    pyc = "%sc" % file_name
    pyo = "%so" % file_name
    if os.path.isfile(pyc):
        os.system("rm %s" % pyc)
    if os.path.isfile(pyo):
        os.system("rm %s" % pyo)
    os.system("python -m py_compile %s" % file_name)


def _write_compile_file(pyc, module):
    with open(pyc, 'rb') as fd:
        fd.seek(8)
        co = marshal.load(fd)
    code_string = marshal.dumps(co)
    scrambled_code = code_string.encode('zlib').encode('base64')
    with open(module, 'w+') as fd:
        fd.write("exec __import__('marshal').loads(\"\"\"%s\"\"\".decode"
                 "('base64').decode('zlib'))" % scrambled_code)


def getpy(basepath=os.path.abspath('.'),
          parentpath='', name='', excepts=(),
          copyOther=False, delC=False, starttime=None):
    """Get .py files list

    :param basepath: root path to do action
    :param parentpath: parent path for .py files
    :param name: name of file or foler
    :param excepts: unexcept files
    :param copyOther: wether copy files
    :return: iterator
    """
    fullpath = os.path.join(basepath, parentpath, name)
    for fname in os.listdir(fullpath):
        ffile = os.path.join(fullpath, fname)
        if os.path.isdir(ffile) and fname != build_dir \
                and not fname.startswith('.'):
            if _skip(ffile) and not copyOther:
                continue
            for f in getpy(basepath, os.path.join(parentpath, name),
                           fname, excepts, copyOther, delC, starttime):
                yield f
        elif os.path.isfile(ffile):
            ext = os.path.splitext(fname)[1]
            if ext == ".c":
                if delC and os.stat(ffile).st_mtime > starttime:
                    os.remove(ffile)
            elif ffile not in excepts and ext not in('.pyc', '.pyx'):
                if ext in('.py', '.pyx') and not _skip(ffile) \
                        and not fname.startswith('__'):
                    yield os.path.join(parentpath, name, fname)
                elif copyOther:
                    dstdir = os.path.join(basepath, build_dir,
                                          parentpath, name)
                    if not ffile.startswith(PROJECT_PREFIX):
                        continue
                    if not os.path.isdir(dstdir):
                        os.makedirs(dstdir)
                    os.system("cp {} {}".format(ffile,
                                                os.path.join(dstdir, fname)))


def main():
    if os.path.exists(build_dir):
        shutil.rmtree(build_dir)
        os.mkdir(build_dir)
    parentpath = ""
    starttime = time.time()
    os.system("python %(set)s/setup.py install "
              "--root %(root)s" % {"set": base_dir,
                                   "root": compile_tmp})
    tmp = '{0}/{1}'.format(compile_tmp, 'usr/lib/python2.7/site-packages')
    os.system("cp -r %(source)s/setup.py %(dest)s/" % {"source": base_dir,
                                                       "dest": tmp})
    setupfile = os.path.join('{}/setup.py'.format(tmp))

    # Get .py files
    module_list = list(getpy(basepath=tmp,
                             parentpath=parentpath,
                             excepts=(setupfile),
                             starttime=starttime))
    new_module = []
    for module in module_list:
        if not module.startswith('{}/'.format(PROJECT_NAME)):
            continue
        in_module = "{}/{}".format(tmp, module)
        _write_compile_file("%sc" % in_module, in_module)
        new_module.append(in_module)
    try:
        cmd = ["build_ext", "-b", build_dir, "-t", build_tmp_dir]
        print cmd  # noqa
        # Parse .py files to .so files
        setup(ext_modules=cythonize(new_module), script_args=cmd)
        # Copy other files
        list(getpy(basepath=base_dir,
                   parentpath=parentpath,
                   excepts=(setupfile),
                   copyOther=True,
                   starttime=starttime))
    except Exception as ex:
        print "error! ", ex.message  # noqa

    # Remove tmp dir
    if os.path.exists(build_tmp_dir):
        shutil.rmtree(build_tmp_dir)
    # Remove tmp dir
    if os.path.exists(compile_tmp):
        shutil.rmtree(compile_tmp)
    print "complate! time:", time.time() - starttime, 's'  # noqa


if __name__ == '__main__':
    main()
